# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-deepview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build
        run: python -m pip install build
      - name: Build deepview
        run: |
          cd src/deepview
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: deepview-dist
          path: src/deepview/dist/

  build-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build
        run: python -m pip install build
      - name: Build deepview_data
        run: |
          cd src/deepview_data
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: deepview-data-dist
          path: src/deepview_data/dist/

  build-tensorflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build
        run: python -m pip install build
      - name: Build deepview_tensorflow
        run: |
          cd src/deepview_tensorflow
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: deepview-tensorflow-dist
          path: src/deepview_tensorflow/dist/

  build-torch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build
        run: python -m pip install build
      - name: Build deepview_torch
        run: |
          cd src/deepview_torch
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: deepview-torch-dist
          path: src/deepview_torch/dist/

  build-canvas-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.6.0'

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install dependencies
        run: |
          cd src/deepview_canvas
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -m pip install jupyter
          python -m pip install jupyter-packaging
          yarn install
      
      - name: Build and package canvas_viz
        run: |
          cd src/deepview_canvas
          yarn workspace @betterwithdata/canvas_viz build
        
      - name: Build and package canvas_ux
        run: |
          cd src/deepview_canvas/canvas_ux
          rm -rf dist
          yarn build:prod
          python setup.py bdist_wheel
          python setup.py sdist
      
      - name: Build and package widgets
        run: |
          cd src/deepview_canvas/widgets
          mkdir -p ../widget-artifacts
          for d in */ ; do
            if [ -d "$d" ]; then
              widget_name=$(basename "$d")
              echo "Building widget: $widget_name"
              cd "$d"
              yarn build:prod
              rm -rf dist
              python setup.py bdist_wheel
              python setup.py sdist
              # Create a directory for this widget's artifacts
              mkdir -p ../../widget-artifacts/$widget_name
              # Copy the distributions to the widget-specific directory
              cp dist/* ../../widget-artifacts/$widget_name/
              cd ..
            fi
          done
      
      - name: Upload canvas_ux distributions
        uses: actions/upload-artifact@v4
        with:
          name: canvas-ux-dist
          path: src/deepview_canvas/canvas_ux/dist/
      
      - name: Upload widgets distributions
        uses: actions/upload-artifact@v4
        with:
          name: canvas-widgets-dist
          path: src/deepview_canvas/widget-artifacts/

  publish-deepview:
    runs-on: ubuntu-latest
    needs: build-deepview
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/deepview
    steps:
      - name: Retrieve distributions
        uses: actions/download-artifact@v4
        with:
          name: deepview-dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-data:
    runs-on: ubuntu-latest
    needs: build-data
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/deepview-data
    steps:
      - name: Retrieve distributions
        uses: actions/download-artifact@v4
        with:
          name: deepview-data-dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-tensorflow:
    runs-on: ubuntu-latest
    needs: build-tensorflow
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/deepview-tensorflow
    steps:
      - name: Retrieve distributions
        uses: actions/download-artifact@v4
        with:
          name: deepview-tensorflow-dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-torch:
    runs-on: ubuntu-latest
    needs: build-torch
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/deepview-torch
    steps:
      - name: Retrieve distributions
        uses: actions/download-artifact@v4
        with:
          name: deepview-torch-dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-canvas-ux:
    runs-on: ubuntu-latest
    needs: build-canvas-packages
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/canvas-ux
    steps:
      - name: Retrieve distributions
        uses: actions/download-artifact@v4
        with:
          name: canvas-ux-dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # This job determines which widgets need to be published
  prepare-canvas-widgets:
    runs-on: ubuntu-latest
    needs: build-canvas-packages
    outputs:
      widget-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Download widget artifacts
        uses: actions/download-artifact@v4
        with:
          name: canvas-widgets-dist
          path: widget-artifacts/
          
      - name: Set up widget matrix
        id: set-matrix
        run: |
          cd widget-artifacts
          WIDGETS=$(ls -d */ | sed 's#/##g' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix={\"widget\":$WIDGETS}" >> $GITHUB_OUTPUT
          echo "Found widgets: $WIDGETS"

  # This job publishes each widget as a separate package
  publish-canvas-widgets:
    needs: prepare-canvas-widgets
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-canvas-widgets.outputs.widget-matrix)}}
      fail-fast: false
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/${{ matrix.widget }}
    steps:
      - name: Download widget artifacts
        uses: actions/download-artifact@v4
        with:
          name: canvas-widgets-dist
          path: widget-artifacts/
      
      - name: Create dist directory for PyPI publishing
        run: |
          mkdir -p dist
          cp widget-artifacts/${{ matrix.widget }}/* dist/
          ls -la dist/
          
      - name: Publish ${{ matrix.widget }} to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
